#! /bin/bash

# This script generates a .opvn file to get dev team member onto service management vpn
# fail on first error
set -e
# Before running this bootstrapper script:
#  - Login to an appropriate AWS account as appropriate user from commamnd-line
#  - Export the following variables prior to calling this script
#  - They are NOT set in this script to avoid details being stored in repo
# USER_SHORTCODE
# OPTIONAL
#   - VPN_DOMAIN - will default

# check required exports have been done
EXPORTS_SET=0
# Check key variables have been exported - see above
if [ -z "$USER_SHORTCODE" ] ; then
  echo  USER_SHORTCODE not set
  EXPORTS_SET=1
fi

if [ $EXPORTS_SET = 1 ] ; then
  echo One or more exports not set
  exit 1
fi

export VPN_DOMAIN="${VPN_DOMAIN:-"uec-dos-sm-vpn"}"
export TEMP_VPN_CERT_DIR="${TEMP_VPN_CERT_DIR:-"dummy-vpn-certs"}"

if [ -n "$OPEN_VPN_ROOT" ]; then
  OPEN_VPN_PROJ_DIR=$OPEN_VPN_ROOT/easy-rsa/easyrsa3
else
  OPEN_VPN_PROJ_DIR=~/projects/open-vpn/easy-rsa/easyrsa3
fi

cd $OPEN_VPN_PROJ_DIR
# generates files in following example filees in following sub directories
# pki/private/nosuch.uec-dos-sm-vpn.tld.key
# pki/issued/nosuch.uec-dos-sm-vpn.tld.crt
# pki/inline/nosuch.uec-dos-sm-vpn.tld.inline
# reqs/nosuch.uec-dos-sm-vpn.tld

# TODO restore
# automates entry of yes at prompt generated by command
# cat << EOF | ./easyrsa build-client-full $USER_SHORTCODE.$VPN_DOMAIN.tld nopass
# yes
# EOF

# create temp dir if not already exists
mkdir -p ~/$TEMP_VPN_CERT_DIR
echo copy previously generated ca crt to dedicated directory
cp pki/ca.crt ~/$TEMP_VPN_CERT_DIR
echo copy generate client cert/key to dedicated directory
cp pki/issued/$USER_SHORTCODE.$VPN_DOMAIN.tld.crt ~/$TEMP_VPN_CERT_DIR
cp pki/private/$USER_SHORTCODE.$VPN_DOMAIN.tld.key ~/$TEMP_VPN_CERT_DIR

cd ~/$TEMP_VPN_CERT_DIR
echo importing generated client key and cert into AWS ACM...
aws acm import-certificate --certificate fileb://$USER_SHORTCODE.$VPN_DOMAIN.tld.crt \
--private-key fileb://$USER_SHORTCODE.$VPN_DOMAIN.tld.key \
--certificate-chain fileb://ca.crt \
> /dev/null

# echo look up vpn endpoint
# aws ec2 describe-client-vpn-endpoints --filters [{"Name":"transport-protocol","Values":["udp",]}]

aws ec2 describe-client-vpn-endpoints --filters Name="transport-protocol",Values="udp"

# aws ec2 describe-client-vpn-endpoints --filters Name="transport-protocol",Values="udp" \
# | jq '.ClientVpnEndpoint | select("ClientVpnEndpointId"=="cvpn-endpoint-0211a379fb4bdc3f1")'

# aws ec2 describe-client-vpn-endpoints --filters Name="transport-protocol",Values="udp" \
# | .[] | select(".Description"=="")'
