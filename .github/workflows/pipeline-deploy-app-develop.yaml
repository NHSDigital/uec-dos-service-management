name: Pipeline Deployment Application Development Environment

on:
  push:
    branches:
      - main
      - 'task/*'

jobs:
  code-line-count:
    name: "Code Line Count"
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: "Code line count"
        uses: NHSDigital/uec-dos-management/.github/actions/code-line-count@task/DR-596_Possible_refactor_for_ext_use
  metadata:
    name: "Get Metadata"
    uses: NHSDigital/uec-dos-management/.github/workflows/metadata.yaml@task/DR-596_Possible_refactor_for_ext_use
  echo-repo-name:
    name: "Echo repo name"
    needs:
      [
        metadata,
      ]
    runs-on: ubuntu-latest
    steps:
      - id: echo
        run: |
          echo "Repo name: ${{ needs.metadata.outputs.reponame }}"
          echo "TF Version: ${{ needs.metadata.outputs.tf_max_version }}"
  # derive-tf-versions:
  #   uses: ./.github/workflows/derive-tf-version.yaml
  # get-metadata:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     build_datetime: ${{ steps.metadata.outputs.build_datetime }}
  #     build_timestamp: ${{ steps.metadata.outputs.build_timestamp }}
  #     build_epoch: ${{ steps.metadata.outputs.build_epoch }}
  #   steps:
  #     - id: metadata
  #       run: |
  #         datetime=$(date -u +'%Y-%m-%dT%H:%M:%S%z')
  #         echo "build_datetime=$datetime" >> $GITHUB_OUTPUT
  #         echo "build_timestamp=$(date --date=$datetime -u +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
  #         echo "build_epoch=$(date --date=$datetime -u +'%s')" >> $GITHUB_OUTPUT
  #         echo "triggering action: ${{ github.event_name }}"
  #         echo "ref type: ${{ github.ref_type }}"
  #         echo "triggering reference: ${{ github.ref_name }}"
  #         echo "github event ref: ${{ github.event.ref }}"
  #         echo "username of user triggering the workflow: ${{ github.actor }}"
  scan-secrets:
    uses: ./.github/workflows/scan-secrets.yaml
  check-file-format:
    uses: ./.github/workflows/check-file-format.yaml
  check-markdown-format:
    uses: ./.github/workflows/check-markdown-format.yaml
  check-terraform-format:
      uses: ./.github/workflows/check-terraform-format.yaml
  validate-terraform:
    name: Validate terraform code
    uses: ./.github/workflows/validate-terraform.yaml
    needs: metadata
    with:
      ENV: dev
      tf_vers: ${{ needs.metadata.outputs.tf_max_version }}
    secrets: inherit
  check-python-black-format:
      uses: ./.github/workflows/check-python-black-format.yaml
  check-python-flake-rules:
      uses: ./.github/workflows/check-python-flake-rules.yaml
  cloc-repository:
    uses: ./.github/workflows/cloc-repository.yaml
  unit-tests:
    needs:
      [
        metadata,
        scan-secrets,
        check-file-format,
        check-markdown-format,
        check-terraform-format,
        check-python-black-format,
        check-python-flake-rules,
        cloc-repository,
        validate-terraform,
      ]
    name: Run unit test
    uses: ./.github/workflows/unit-test.yaml
    with:
      github_environment: dev
    secrets: inherit
  deploy-vpc-vpn-infrastructure:
    needs:
      [
        validate-terraform,
        metadata,
      ]
    uses: ./.github/workflows/action-infrastructure-stack.yaml
    with:
      github_environment: dev
      stack: network
      action: plan
      deployment_workspace: default
      tf_vers: ${{ needs.metadata.outputs.tf_max_version }}
    secrets: inherit
  deploy-application-infrastructure:
      needs:
        [
          validate-terraform,
          metadata,
        ]
      uses: ./.github/workflows/action-infrastructure-stack.yaml
      with:
        github_environment: dev
        stack: application
        action: apply
        tf_vers: ${{ needs.metadata.outputs.tf_max_version }}
      secrets: inherit
  deploy-aurora-related-infrastructure:
    needs:
      [
        validate-terraform,
        metadata,
      ]
    uses: ./.github/workflows/action-infrastructure-stack.yaml
    with:
      github_environment: dev
      stack: aurora
      action: apply
      deployment_workspace: default
      tf_vers: ${{ needs.metadata.outputs.tf_max_version }}
    secrets: inherit
  deploy-support-tools-infrastructure:
      needs:
        [
          validate-terraform,
          metadata,
        ]
      uses: ./.github/workflows/action-infrastructure-stack.yaml
      with:
        github_environment: dev
        stack: support_tools
        action: apply
        tf_vers: ${{ needs.metadata.outputs.tf_max_version }}
      secrets: inherit
  build-and-deploy-application-code:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    needs:
      [
        deploy-application-infrastructure,
      ]
    strategy:
      matrix:
        service-name:
          - healthcare-services-data-manager
          - locations-data-manager
          - organisation-affiliations-data-manager
          - organisations-data-manager
          - questionnaire-responses-data-manager
          - questionnaires-data-manager
          - org_data_load
          - locations_data_load
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/uec-dos-service-management-github-runner
          role-session-name: github-pipeline-session
          aws-region: ${{ vars.AWS_REGION }}

      - name: Build and deploy application code
        run: |
          export SERVICE_NAME=${{ matrix.service-name }}
          /bin/bash ./scripts/app-build-deploy.sh
  slack-notifications:
    needs: [
      build-and-deploy-application-code,
      unit-tests,
      deploy-support-tools-infrastructure,
      deploy-vpc-vpn-infrastructure,
    ]
    if: always()
    uses: ./.github/workflows/slack-notifications.yaml
    with:
      env: dev
    secrets: inherit

