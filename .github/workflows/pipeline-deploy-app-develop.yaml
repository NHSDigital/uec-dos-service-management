name: Pipeline Deployment Application Development Environment

on:
  push:
    branches:
      - main
      - 'task/*'

jobs:
  metadata:
    name: "Get Metadata"
    uses: NHSDigital/uec-dos-management/.github/workflows/metadata.yaml@v0.3
  quality_check:
    name: "Quality Check"
    uses: NHSDigital/uec-dos-management/.github/workflows/quality_checks.yaml@v0.3
    needs:
      [
        metadata,
      ]
    with:
      environment: dev
      workspace: ${{ needs.metadata.outputs.workspace }}
      stacks: '["github-runner", "terraform_management", "application", "support_tools"]'
    secrets: inherit
  unit-tests:
    name: Unit Test
    needs:
      [
        metadata,
        quality_check,
      ]
    uses: NHSDigital/uec-dos-management/.github/workflows/unit_test.yaml@v0.3
    with:
      env: dev
    secrets: inherit
  deploy-vpc-vpn-infrastructure:
    needs:
      [
        quality_check,
        metadata,
      ]
    uses: ./.github/workflows/action-infrastructure-stack.yaml
    with:
      github_environment: dev
      stack: network
      action: plan
      deployment_workspace: default
    secrets: inherit
  deploy-application-infrastructure:
      needs:
        [
          quality_check,
          metadata,
        ]
      uses: NHSDigital/uec-dos-management/.github/workflows/deploy-infrastructure.yaml@v0.3
      with:
        environment: dev
        workspace: ${{ needs.metadata.outputs.workspace }}
        stacks: application
        action: apply
      secrets: inherit
  deploy-aurora-related-infrastructure:
    needs:
      [
        quality_check,
        metadata,
      ]
    uses: ./.github/workflows/action-infrastructure-stack.yaml
    with:
      github_environment: dev
      stack: aurora
      action: apply
      deployment_workspace: default
    secrets: inherit
  deploy-support-tools-infrastructure:
      needs:
        [
          quality_check,
          metadata,
        ]
      uses: ./.github/workflows/action-infrastructure-stack.yaml
      with:
        github_environment: dev
        stack: support_tools
        action: apply
      secrets: inherit
  build-and-deploy-application-code:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    needs:
      [
        deploy-application-infrastructure,
      ]
    strategy:
      matrix:
        service-name:
          - healthcare-services-data-manager
          - locations-data-manager
          - organisation-affiliations-data-manager
          - organisations-data-manager
          - questionnaire-responses-data-manager
          - questionnaires-data-manager
          - org_data_load
          - locations_data_load
          - organisation_affiliations_data_load
          - service_data_load
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/uec-dos-service-management-github-runner
          role-session-name: github-pipeline-session
          aws-region: ${{ vars.AWS_REGION }}

      - name: Build and deploy application code
        run: |
          export SERVICE_NAME=${{ matrix.service-name }}
          /bin/bash ./scripts/app-build-deploy.sh
  slack-notifications:
    needs: [
      build-and-deploy-application-code,
      unit-tests,
      deploy-support-tools-infrastructure,
      deploy-vpc-vpn-infrastructure,
    ]
    if: always()
    uses: ./.github/workflows/slack-notifications.yaml
    with:
      env: dev
    secrets: inherit

