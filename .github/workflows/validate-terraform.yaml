name: Validate terraform

on:
  workflow_call:
    inputs:
      ENV:
        required: true
        type: string
      tf_vers:
        required: true
        type: string

jobs:
  # Done separately from application and against default workspace
  validate-bootstrap-terraform:
    name: Validate bootstrap terraform against the max version
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENV }}
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        stack:
          - github-runner
          - terraform_management
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          # force workflow failure to trigger slack notification
          #role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/uec-dos-service-management-github-runner
          role-session-name: github-pipeline-session
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install Terraform v${{ inputs.tf_vers }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tf_vers }}

      - name: Initialize terraform and validate stack ${{ matrix.stack }} against v${{ inputs.tf_vers }}
        run: |
          export ACTION=validate
          export STACK=${{ matrix.stack }}
          export ACCOUNT_TYPE=${{ vars.ACCOUNT_TYPE }}
          export DEPLOYMENT_WORKSPACE=default
          /bin/bash ./scripts/action-infra-stack.sh
  validate-application-terraform:
    name: Validate application terraform against the max version
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENV }}
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        stack:
          - application
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/uec-dos-service-management-github-runner
          role-session-name: github-pipeline-session
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install Terraform v${{ inputs.tf_vers }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tf_vers }}

      - name: Initialize terraform and validate stack ${{ matrix.stack }} against v${{ inputs.tf_vers }}
        run: |
          export ACTION=validate
          export STACK=${{ matrix.stack }}
          export ACCOUNT_TYPE=${{ vars.ACCOUNT_TYPE }}
          /bin/bash ./scripts/action-infra-stack.sh
  validate-support-tools-terraform:
    name: Validate terraform against the max version
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENV }}
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        stack:
          - support_tools
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/uec-dos-service-management-github-runner
          role-session-name: github-pipeline-session
          aws-region: ${{ vars.AWS_REGION }}

      - name: Install Terraform v${{ inputs.tf_vers }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.tf_vers }}

      - name: Initialize terraform and validate stack ${{ matrix.stack }} against v${{ inputs.tf_vers }}
        run: |
          export ACTION=validate
          export STACK=${{ matrix.stack }}
          export ACCOUNT_TYPE=${{ vars.ACCOUNT_TYPE }}
          export DEPLOYMENT_WORKSPACE=default
          /bin/bash ./scripts/action-infra-stack.sh
  slack-notifications:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Send custom JSON data to Slack workflow
        uses: slackapi/slack-github-action@v1.24.0
        if: failure()
        with:
          status: ${{ job.status }}
          notify_when: "failure"
          notification_title: "{workflow} has failed"
          # For posting a rich message using Block Kit
          payload: |
            {
              "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}\n\nPushed by: @${{ github.actor }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}\n\nPushed by: @${{ github.actor }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
